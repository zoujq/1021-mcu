C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE WORK
OBJECT MODULE PLACED IN .\Output\WORK.obj
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE ..\..\User\C\WORK.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Application;
                    -..\..\User\INC;..\..\Libraries) DEBUG PRINT(.\List\WORK.lst) TABS(2) OBJECT(.\Output\WORK.obj)

line level    source

   1          #include "HC89F303B.h"
   2          #include "HC89F30xB_SYS.h"
   3          #include "HC89F30xB_IO_INIT.h"
   4          #include "WDT\WDT.h"
   5          #include "HC_Delay.h"
   6          #include "TIMER\TIMER.h"
   7          #include "Fun_Handle\Fun_Handle.h"
   8          #include "HC89F30xB_GeneralKey_Touch_Lib_V1.04\HC89F30xB_GeneralKey_Touch_Lib.h"
   9          #include "HC89F30xB_GeneralKey_Touch_Lib_V1.04\HC89F30xB_GeneralKey_Touch_Filter.h"
  10          #include "HC89F30xB_GeneralKey_Touch_Lib_V1.04\HC89F30xB_GeneralKey_Touch_Multibutton.h"
  11          #include "HC89F30xB_TouchUartDebug_Lib_V1.00\HC89F30xB_TouchUartDebug_Lib_CFG.h"
  12          #include "HC89F30xB_TouchUartDebug_Lib_V1.00\HC89F30xB_TouchUartDebug_Lib.h"
  13          
  14          void init_printf();
  15          void init_work();
  16          void un_init_work();
  17          void display_all();
  18          
  19          void init_ntc_adc();
  20          void init_leds();
  21          
  22          
  23          static char init_state=0;
  24          void init_work()
  25          {
  26   1        if(init_state==0)
  27   1        {
  28   2          init_state=1;
  29   2          init_ntc_adc();
  30   2          init_leds();
  31   2        }
  32   1      }
  33          void un_init_work()
  34          {
  35   1        if(init_state==1)
  36   1        {
  37   2          init_state=0;
  38   2          
  39   2          //NTC
  40   2          P0M2=GPIO_In_AN;//OFF NTC 
  41   2          P2M0=GPIO_In_AN;//OFF NTC POWER
  42   2          //LED
  43   2          P1M3=GPIO_In_AN;
  44   2          P2M1=GPIO_In_AN;
  45   2          P3M5=GPIO_In_AN;
  46   2          P2M4=GPIO_In_AN;
  47   2          P2M2=GPIO_In_AN;
  48   2          P1M5=GPIO_In_AN;
  49   2          P3M4=GPIO_In_AN;
  50   2          P1M6=GPIO_In_AN;
  51   2          P2M3=GPIO_In_AN;
  52   2          P1M4=GPIO_In_AN;
  53   2          
  54   2          ADCC0=0x03;
C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 2   

  55   2          ADCC1=0;
  56   2          ADCC2=0;
  57   2          ADCR=0;
  58   2      
  59   2          
  60   2        }
  61   1      
  62   1      }
  63          
  64          
  65          /*************************************ADC************************************************/
  66          u16 code Temp_Table[100]={
  67          3815,3788,3761,3734,3707,3680,3653,3626,3599,3572,3545,3518,3491,3464,3437,3410,3383,3356,
  68            3329,3302,3275,3248,3221,3194,3167,3140,3113,3086,3059,3032,3005,2978,2951,2924,2897,2870,
  69            2843,2816,2789,2762,2735,2708,2681,2654,2627,2600,2573,2546,2519,2492,2465,2438,2411,2384,
  70            2357,2330,2303,2276,2249,2222,2195,2168,2141,2114,2087,2060,2033,2006,1979,1952,1925,1898,
  71            1871,1844,1817,1790,1763,1736,1709,1682,1655,1628,1601,1574,1547,1520,1493,1466,1439,1412,
  72            1385,1358,1331,1304,1277,1250,1223,1196,1169,1142
  73          };
  74          
  75          void init_ntc_adc()
  76          {
  77   1        
  78   1        P0M2 = 0x01;                //P02设置为模拟输入
  79   1        ADCC0 = 0x80;           //打开ADC转换电源
  80   1        Delay_10us(5);            //延时50us，确保ADC系统稳定
  81   1        ADCC1 = 2;            //选择外部通道2
  82   1        ADCC2 = 0x4B;           //转换结果12位数据，数据右对齐，ADC时钟16分频
  83   1      
  84   1        //NTC POWER
  85   1        P2M0=GPIO_Out_PP; 
  86   1        P2_0=1;
  87   1        
  88   1        
  89   1      }
  90          unsigned int get_ntc_adc()
  91          {
  92   1          ADCC0 |= 0x40;          //启动ADC转换
  93   1          while(!(ADCC0&0x20));     //等待ADC转换结束
  94   1          ADCC0 &=~ 0x20;         //清除标志位
  95   1          return ADCR;
  96   1      }
  97          
  98          u16 get_temp()
  99          {
 100   1        u16 n=0;
 101   1        u16 ntc_adc=get_ntc_adc();
 102   1        
 103   1        for(n=0;n<100;n++)
 104   1        {
 105   2          if(Temp_Table[n]<ntc_adc)
 106   2          {
 107   3            break;
 108   3          }
 109   2        }
 110   1        return n;
 111   1      
 112   1      }
 113          
 114          
 115          /************************************数码管***************************************/
 116          //阳极
C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 3   

 117          #define LED1 P1_3
 118          #define LED2 P2_1
 119          #define LED3 P3_5
 120          #define LED4 P2_4
 121          #define LED5 P2_2
 122          #define LED7 P1_5
 123          #define LED9 P3_4
 124          //阴极
 125          #define LED6 P1_6
 126          #define LED8 P2_3
 127          #define LED10 P1_4
 128          void init_leds()
 129          {
 130   1        P1M3=GPIO_Out_PP;
 131   1        P2M1=GPIO_Out_PP;
 132   1        P3M5=GPIO_Out_PP;
 133   1        P2M4=GPIO_Out_PP;
 134   1        P2M2=GPIO_Out_PP;
 135   1        P1M5=GPIO_Out_PP;
 136   1        P3M4=GPIO_Out_PP;
 137   1        P1M6=GPIO_Out_PP;
 138   1        P2M3=GPIO_Out_PP;
 139   1        P1M4=GPIO_Out_PP;
 140   1        LED6=1;
 141   1        LED8=1;
 142   1        LED10=1;
 143   1      
 144   1      }
 145          
 146          void display(char position,char value)
 147          {
 148   1        LED6=1;
 149   1        LED8=1;
 150   1        LED10=1;
 151   1          
 152   1        switch(value)
 153   1        {
 154   2          case 0:
 155   2            LED1=0; LED2=1;LED3=1;LED4=1;LED5=1;LED7=1;LED9=1;
 156   2        
 157   2            break;
 158   2          case 1:
 159   2            LED1=0; LED2=1;LED3=0;LED4=0;LED5=1;LED7=0;LED9=0;
 160   2            break;
 161   2          case 2:
 162   2            LED1=1; LED2=1;LED3=1;LED4=0;LED5=0;LED7=1;LED9=1;
 163   2            break;
 164   2          case 3:
 165   2            LED1=1; LED2=1;LED3=1;LED4=0;LED5=1;LED7=0;LED9=1;
 166   2            break;
 167   2          case 4:
 168   2            LED1=1; LED2=1;LED3=0;LED4=1;LED5=1;LED7=0;LED9=0;
 169   2            break;
 170   2          case 5:
 171   2            LED1=1; LED2=0;LED3=1;LED4=1;LED5=1;LED7=0;LED9=1;
 172   2            break;
 173   2          case 6:
 174   2            LED1=1; LED2=0;LED3=1;LED4=1;LED5=1;LED7=1;LED9=1;
 175   2            break;
 176   2          case 7:
 177   2            LED1=0; LED2=1;LED3=1;LED4=0;LED5=1;LED7=0;LED9=0;
 178   2            break;
C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 4   

 179   2          case 8:
 180   2            LED1=1; LED2=1;LED3=1;LED4=1;LED5=1;LED7=1;LED9=1;
 181   2            break;
 182   2          case 9:
 183   2            LED1=1; LED2=1;LED3=1;LED4=1;LED5=1;LED7=0;LED9=1;
 184   2            break;
 185   2          case 'c':
 186   2            LED1=1; LED2=0;LED3=1;LED4=1;LED5=0;LED7=0;LED9=0;
 187   2            break;    
 188   2          case '-':
 189   2            LED1=0; LED2=1;LED3=1;LED4=1;LED5=1;LED7=1;LED9=1;
 190   2            break;
 191   2          case '+':
 192   2            LED1=0; LED2=0;LED3=0;LED4=0;LED5=0;LED7=0;LED9=0;
 193   2            break;
 194   2          default:
 195   2            
 196   2            break;
 197   2        
 198   2        }
 199   1        if(position==1)
 200   1        {   
 201   2          LED6=1;
 202   2          LED8=1;
 203   2          LED10=0;
 204   2        }
 205   1        else if(position==2) 
 206   1        {
 207   2          LED6=1;
 208   2          LED8=0;
 209   2          LED10=1;
 210   2        }
 211   1        else
 212   1        {
 213   2          LED6=0;
 214   2          LED8=1;
 215   2          LED10=1;
 216   2        }
 217   1      }
 218          void display_temp(u16 temp)
 219          {
 220   1        char b_1=0;
 221   1        char b_2=0;
 222   1        if(temp>99)
 223   1        {
 224   2          temp=99;
 225   2        }
 226   1        b_1=temp/10;
 227   1        b_2=temp%10;
 228   1        
 229   1        if(b_1==0)
 230   1        {
 231   2          b_1='+';
 232   2        }
 233   1        display(1,b_1);
 234   1        Delay_1ms(2);
 235   1        display(2,b_2);
 236   1        Delay_1ms(2);
 237   1        display(3,'c');
 238   1        Delay_1ms(2);
 239   1      
 240   1      }
C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 5   

 241          void display_all()
 242          {
 243   1        static u16 last_temp=0;
 244   1        if(init_state==1)
 245   1        {
 246   2          u16 real_temp=get_temp();
 247   2          
 248   2          if(real_temp>last_temp)
 249   2          {
 250   3            if(real_temp-last_temp>=2)
 251   3            {
 252   4              last_temp=real_temp-1;
 253   4            }
 254   3          }
 255   2          else if(real_temp<last_temp)
 256   2          {
 257   3            if(last_temp-real_temp>=2)
 258   3            {
 259   4              last_temp=real_temp+1;
 260   4            }
 261   3          } 
 262   2          if(real_temp==99)
 263   2          {
 264   3            last_temp=99;
 265   3          }
 266   2          if(real_temp==0)
 267   2          {
 268   3            last_temp=0;
 269   3          }
 270   2          
 271   2          display_temp(last_temp);
 272   2        }
 273   1        
 274   1      }
 275          
 276          /********************************************printf****************************************/
 277          
 278          #define PRINTF_BAUDRATE     9600   
 279          void init_printf()
 280          {
 281   1        P2M0 = 0xC1;                //设置P20推完输出
 282   1        
 283   1        TXD_MAP = 0x20;           //TXD
 284   1        
 285   1        T4CON = 0x06;           //T4，波特率发生器
 286   1      
 287   1        SCON2 = 0x02;   // uart mode 1
 288   1        
 289   1        T4 = 65536.5 - (SYSCLK_FOSC / 16 / PRINTF_BAUDRATE); //
 290   1      
 291   1      
 292   1      }
 293          
 294          char putchar (char c)
 295          {
 296   1        SBUF = c;
 297   1      
 298   1        while(!TI);
 299   1      
 300   1        TI = 0;
 301   1        return 0;
 302   1      }
C51 COMPILER V9.56.0.0   WORK                                                              08/12/2020 17:39:39 PAGE 6   

 303          
 304          
 305          
 306          
 307          
 308          
 309          
 310          
 311          
 312          
 313          
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          
 322          
 323          
 324          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    714    ----
   CONSTANT SIZE    =    200    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
